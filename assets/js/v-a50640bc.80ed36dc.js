"use strict";(self.webpackChunkshx_blog=self.webpackChunkshx_blog||[]).push([[34],{9536:(e,s,l)=>{l.r(s),l.d(s,{data:()=>a});const a={key:"v-a50640bc",path:"/cli/lerna/start.html",title:"lerna5.x 入门",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[{level:3,title:"优势",slug:"优势",children:[]},{level:3,title:"lerna 管理模式",slug:"lerna-管理模式",children:[]}]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"命令",slug:"命令",children:[]}],filePathRelative:"cli/lerna/start.md",git:{updatedTime:1664024397e3,contributors:[{name:"shangxin",email:"1083732908@qq.com",commits:2}]}}},2733:(e,s,l)=>{l.r(s),l.d(s,{default:()=>n});const a=(0,l(6252).uE)('<h1 id="lerna5-x-入门" tabindex="-1"><a class="header-anchor" href="#lerna5-x-入门" aria-hidden="true">#</a> lerna5.x 入门</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><blockquote><p><code>Lerna 是用于 TypeScript/JavaScript 的原始 monorepo 工具。它已经存在多年，被数以万计的项目使用，包括 React、Jest 和 Babel。</code></p></blockquote><p>它解决了 JavaScript monorepos 的三个最大问题：</p><ul><li><p>Lerna 在 repo 中链接不同的项目，因此它们可以相互导入，而无需向 NPM 发布任何内容。</p></li><li><p>Lerna 对任意数量的项目运行命令，它以最有效的方式、以正确的顺序执行它，并且可以将其分布在多台机器上。</p></li><li><p>Lerna 管理您的发布过程，从版本管理到发布再到 NPM，它提供了多种选项来确保可以适应任何工作流程。</p></li></ul><hr><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><ul><li>大幅减少重复操作</li><li>提升操作的标准化</li></ul><hr><h3 id="lerna-管理模式" tabindex="-1"><a class="header-anchor" href="#lerna-管理模式" aria-hidden="true">#</a> lerna 管理模式</h3><p>lerna 管理项目可以使用两种模式，默认固定模式，当使用 lerna init -i 命令初始化项目时，此时为独立模式</p><ul><li>固定模式：所有包使用同一个版本</li><li>独立模式：给每个包单独设置版本号</li></ul><blockquote><p>可以将lerna.json 中的 <code>version</code> 设置为 <code>Independent</code> 改变成独立模式。默认是统一的版本号</p></blockquote><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><ol><li>全局安装 Lerna</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">npm i lerna -g\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>本地安装</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">  mkdir xxx &amp;&amp; </span><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> xxx </span></span>\n<span class="line"><span style="color:#D4D4D4;">  npm init </span></span>\n<span class="line"><span style="color:#D4D4D4;">  npm i lerna -D</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>初始化</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;"> lerna init</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><ol><li><code>lerna init</code> 将一个仓库初始化为一个lerna仓库，或升级现有的lerna版本到当前安装的版本</li></ol><blockquote><p>--independent/-i – 使用独立的版本控制模式</p></blockquote><ol start="2"><li><p><code>lerna create</code> 创建一个 package 到项目工程的 packages 下</p></li><li><p><code>lerna add</code> 安装包</p><ul><li>没有参数，在根目录安装包，所有模块都可引用</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">lerna add babel</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>可以匹配给那些包安装</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">lerna add module-1 packages/prefix-*</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>--scope</code> 安装的包还是在根node_module,只是配置只会z增加到当前的package.json中</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">lerna add module-1 --scope=module-2</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>--dev</code> 安装到devDependencies</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">lerna add module-1 --scope=module-2 --dev</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><code>lerna bootstrap</code> 将本地包链接在一起并安装剩余的包依赖项</p></li><li><p><code>lerna clean</code> 从所有包中删除 node_modules 目录，但不会删除根目录的node_module。只会删除 node_modules，不会删除 package.json 中的依赖</p></li><li><p><code>lerna link</code> 链接互相引用的库，当 package/package.json 内明确了 packages 下的包时，才会将相关包链接到 package/node_modules 中。</p></li><li><p><code>lerna list</code> 列出所有的包的信息</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">lerna list = lerna ls</span></span>\n<span class="line"><span style="color:#D4D4D4;">lerna ll</span></span>\n<span class="line"><span style="color:#D4D4D4;">lerna la</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="8"><li><p><code>lerna changed</code> 列出所有改动的包</p></li><li><p><code>lerna diff</code> 列出所有或单个包的差异</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">$ lerna diff</span></span>\n<span class="line"><span style="color:#6A9955;"># 指定看某个模块的差异</span></span>\n<span class="line"><span style="color:#D4D4D4;">$ lerna diff package-name</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="10"><li><p><code>lerna run</code> 运行每个包下面的 script命令</p></li><li><p><code>lerna exec</code> 执行 shell 脚本</p></li><li><p><code>lerna info</code> 查看 lerna 及运行环境的信息</p></li><li><p><code>lerna publish</code> 发布包</p></li></ol><ul><li>发布时会自动执行：git add package-lock.json，所以 package-lock.json 不要加入 .gitignore</li><li>先创建远程仓库，并且同步一次 master 分支</li><li>执行 lerna publish 前先完成 npm login，登录的时候要先检查npm源地址，要切换到https://registry.npmjs.org/</li><li>如果发布的 npm 包名为：@xxx/yyy 的格式，需要先在 npm 注册名为：xxx 的 organization，否则可能会提交不成功</li><li>发布到 npm group 时默认为 private，所以我们需要手动在 package.json 中添加如下配置：</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#CE9178;">&quot;publishConfig&quot;</span><span style="color:#D4D4D4;">: {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;access&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;public&quot;</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',30),n={render:function(e,s){return a}}}}]);